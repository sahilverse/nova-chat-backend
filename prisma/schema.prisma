generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ---------------- ENUMS ----------------

enum CallType {
    AUDIO
    VIDEO
}

enum CallStatus {
    ONGOING
    COMPLETED
    MISSED
}

enum AttachmentType {
    PHOTO
    VIDEO
    AUDIO
}

enum MessageStatus {
    SENT
    DELIVERED
    READ
}

enum UserRoleInChat {
    MEMBER
    ADMIN
    OWNER
}

enum MessageType {
    TEXT
    SYSTEM
    ATTACHMENT
    TEXT_ATTACHMENT
}

// ---------------- MODELS ----------------

model User {
    id                   String    @id @default(cuid())
    email                String    @unique
    name                 String
    password             String?
    profileImage         String?
    profileImagePublicId String?
    isActive             Boolean   @default(true)
    lastSeen             DateTime?
    isSuperUser          Boolean   @default(false)
    isModerator          Boolean   @default(false)

    verificationCode    String?
    verificationExpires DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    chatMembers           UserChat[]
    messages              Message[]               @relation("MessagesSent")
    reactions             MessageReaction[]
    callsInitiated        Call[]                  @relation("CallsInitiated")
    CallParticipants      CallParticipants[]
    chatsCreated          Chat[]
    MessageDeliveryStatus MessageDeliveryStatus[]
    MessagePin            MessagePin[]
}

model Chat {
    id             String  @id @default(cuid())
    name           String?
    description    String?
    groupImage     String?
    isGroup        Boolean @default(false)
    participantKey String? @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    members       UserChat[]
    messages      Message[]
    calls         Call[]
    lastMessageId String?
    lastMessage   Message?   @relation("ChatLastMessage", fields: [lastMessageId], references: [id])
    createdById   String?
    createdBy     User?      @relation(fields: [createdById], references: [id], onDelete: SetNull)
}

model UserChat {
    id                String         @id @default(cuid())
    chatId            String
    userId            String
    role              UserRoleInChat @default(MEMBER)
    deletedAt         DateTime?
    archived          Boolean        @default(false)
    muted             Boolean        @default(false)
    customName        String?
    joinedAt          DateTime       @default(now())
    lastReadMessageId String?
    lastReadAt        DateTime?

    chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([chatId, userId])
    @@index([userId])
}

model Message {
    id              String      @id @default(cuid())
    content         String?
    metadata        Json?
    chatId          String
    senderId        String
    messageType     MessageType @default(TEXT)
    replyToId       String?
    forwardedFromId String?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    EditedAt  DateTime?
    deletedAt DateTime?
    unsentAt  DateTime?

    chat          Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
    sender        User      @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade)
    replyTo       Message?  @relation("MessageReplies", fields: [replyToId], references: [id])
    replies       Message[] @relation("MessageReplies")
    forwardedFrom Message?  @relation("MessageForwards", fields: [forwardedFromId], references: [id])
    forwards      Message[] @relation("MessageForwards")

    attachments Attachment[]
    reactions   MessageReaction[]

    chatAsLastMessage     Chat[]                  @relation("ChatLastMessage")
    MessageDeliveryStatus MessageDeliveryStatus[]
    MessagePin            MessagePin[]

    @@index([chatId, createdAt])
}

model MessageDeliveryStatus {
    id        String        @id @default(cuid())
    messageId String
    userId    String
    status    MessageStatus @default(SENT)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([messageId, userId])
    @@index([userId, status])
}

model MessagePin {
    id        String   @id @default(cuid())
    messageId String
    userId    String
    pinnedAt  DateTime @default(now())

    message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([messageId, userId])
    @@index([userId])
}

model Attachment {
    id        String         @id @default(cuid())
    messageId String
    type      AttachmentType
    url       String
    thumbnail String?
    mimeType  String?
    fileSize  Int?
    duration  Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model MessageReaction {
    id        String @id @default(cuid())
    messageId String
    userId    String
    type      String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([messageId, userId])
}

model Call {
    id          String     @id @default(cuid())
    chatId      String
    initiatorId String
    startedAt   DateTime   @default(now())
    endedAt     DateTime?
    duration    Int?
    callType    CallType
    callStatus  CallStatus

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    chat         Chat               @relation(fields: [chatId], references: [id], onDelete: Cascade)
    initiator    User               @relation("CallsInitiated", fields: [initiatorId], references: [id], onDelete: Cascade)
    participants CallParticipants[]
}

model CallParticipants {
    id       String     @id @default(cuid())
    callId   String
    userId   String
    joinedAt DateTime   @default(now())
    leftAt   DateTime?
    status   CallStatus @default(ONGOING)

    call Call @relation(fields: [callId], references: [id], onDelete: Cascade)
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([callId, userId])
}
